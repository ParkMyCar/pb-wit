interface rules {
    use types.{attribute, provider, waker};
    use context.{ctx};

    rule-set: func() -> list<tuple<string, rule>>;

    /// An individual rule that can be run.
    resource rule {
        /// Name of this rule.
        name: static func() -> string;
        /// Run a rule.
        /// 
        /// This method returns a `rule-future` which is an asynchronous value and it must be polled
        /// to determine the result of running the rule.
        run: func(attrs: list<tuple<string, attribute>>, context: ctx) -> rule-future;
    }

    /// An asynchronous result for the execution of a `rule`.
    /// 
    /// Canonically this type would be known as a `Future` or `Promise` in many languages.
    /// 
    /// Note: WIT does not support generic user defined types, so we need to create a specific
    /// `rule-future` and `rule-poll` type as opposed to some `future<list<provider>>`. WASI 
    /// Preview 3 (aka WASIp3) is supposed to introduce the `async` keyword which should prevent
    /// this need for "hand written" futures.
    resource rule-future {
        poll: func(waker: waker) -> rule-poll;
    }

    /// The result of "polling" a `rule-future`.
    variant rule-poll {
        pending,
        ready(list<provider>),
    }
}

/// Context or state that is provided to a rule implementation.
interface context {
    use filesystem.{write-filesystem};
    use http.{client};

    resource ctx {
        actions: func() -> actions;
    }

    resource actions {
        /// Get an HTTP client that can make requests.
        http: func() -> client;

        /// Get a client to write files.
        write-filesystem: func() -> write-filesystem;
    }
}
