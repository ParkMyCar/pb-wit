/// A read-only filesystem interface.
interface read-filesystem {
    use types.{bytes-stream};
    
    /// Handle to an open file.
    resource file {
        /// Name of the file, including extension.
        name: func() -> string;

        /// Read at most length bytes starting from offset.
        read: func(length: u64, offset: u64) -> list<u8>;

        /// Return a resource that asynchronously reads bytes from this file.
        read-stream: func() -> bytes-stream;
    }
}

/// A writeable filesystem interface.
interface write-filesystem {
    use read-filesystem.{file};
    use types.{failable-future, waker};

    resource write-client {
        /// Create a new file with the specified name.
        create-file: func(name: string) -> create-file-future;

        /// Create a new directory with the specified name.
        create-directory: func(name: string) -> create-directory-future;
    }

    resource write-directory {
        /// Create a new file with the specified name.
        create-file: func(name: string) -> create-file-future;

        /// Create a new directory with the specified name.
        create-directory: func(name: string) -> create-directory-future;

        /// Asynchronously write bytes to an extended attribute on this directory.
        write-xattr: func(name: string, data: list<u8>) -> failable-future;

        /// Set the mtime of this directory.
        set-mtime: func(millis: u64) -> failable-future;

        /// Close this directory, flushing any content (e.g. xattrs) to disk.
        close: func() -> failable-future;
    }

    resource write-file {
        /// Asynchronously writes bytes to this file.
        append: func(data: list<u8>) -> failable-future;

        /// Asynchronously write bytes to an extended attribute on this file.
        write-xattr: func(name: string, data: list<u8>) -> failable-future;

        /// Set the mtime of this file.
        set-mtime: func(millis: u64) -> failable-future;

        /// Close this file for writing, and open it for reading.
        into-read: func() -> file;

        /// Close this file, flushing content to disk.
        close: func() -> failable-future;
    }

    resource create-file-future {
        poll: func(waker: waker) -> create-file-poll;
    }

    variant create-file-poll {
        pending,
        ready(result<write-file, string>),
    }

    resource create-directory-future {
        poll: func(waker: waker) -> create-directory-poll;
    }

    variant create-directory-poll {
        pending,
        ready(result<write-directory, string>),
    }
}
